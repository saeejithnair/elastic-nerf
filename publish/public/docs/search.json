[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Elastic-NeRF.",
    "section": "",
    "text": "Making NeRFs smaller and faster with elastic representations."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Vision and Image Processing Lab (VIP) @ UWaterloo, Department of Systems Design Engineering"
  },
  {
    "objectID": "experiments/index.html",
    "href": "experiments/index.html",
    "title": "Experiments",
    "section": "",
    "text": "Results from experiments.",
    "crumbs": ["Experiments"]
  },
  {
    "objectID": "documentation/index.html",
    "href": "documentation/index.html",
    "title": "Documentation",
    "section": "",
    "text": "Documentation and walkthroughs explaining the design, motivation, and architecture.",
    "crumbs": ["Documentation"]
  },
  {
    "objectID": "logs/index.html",
    "href": "logs/index.html",
    "title": "Logs",
    "section": "",
    "text": "Ran wandb sweep for ngp_occ-blender-baseline to benchmark the performance of my baseline reimplementation of Nerfacc NGP Occ on the Blender dataset.\nwandb sweep configs/experiments/ngp_occ/blender/ngp_occ-blender-baseline.yaml\nGPU_IDS=0 docker compose run -d --build elastic-nerf wandb agent saeejithn/elastic-nerf/bj5mkdex\n\n\n\nRan wandb sweep for ngp_prop-mipnerf360-baseline to benchmark the performance of my baseline reimplementation of Nerfacc NGP Prop model on the Mip-NeRF 360 dataset.\nwandb sweep configs/experiments/ngp_prop/mipnerf360/ngp_prop-mipnerf360-baseline.yaml\nGPU_IDS=2 docker compose run -d --build elastic-nerf wandb agent saeejithn/elastic-nerf/0rn5ziwc",
    "crumbs": ["Logs"]
  },
  {
    "objectID": "logs/index.html#ngp-occ-blender-baseline-benchmarking",
    "href": "logs/index.html#ngp-occ-blender-baseline-benchmarking",
    "title": "Logs",
    "section": "",
    "text": "Ran wandb sweep for ngp_occ-blender-baseline to benchmark the performance of my baseline reimplementation of Nerfacc NGP Occ on the Blender dataset.\nwandb sweep configs/experiments/ngp_occ/blender/ngp_occ-blender-baseline.yaml\nGPU_IDS=0 docker compose run -d --build elastic-nerf wandb agent saeejithn/elastic-nerf/bj5mkdex",
    "crumbs": ["Logs"]
  },
  {
    "objectID": "logs/index.html#ngp-prop-mipnerf-360-baseline-benchmarking",
    "href": "logs/index.html#ngp-prop-mipnerf-360-baseline-benchmarking",
    "title": "Logs",
    "section": "",
    "text": "Ran wandb sweep for ngp_prop-mipnerf360-baseline to benchmark the performance of my baseline reimplementation of Nerfacc NGP Prop model on the Mip-NeRF 360 dataset.\nwandb sweep configs/experiments/ngp_prop/mipnerf360/ngp_prop-mipnerf360-baseline.yaml\nGPU_IDS=2 docker compose run -d --build elastic-nerf wandb agent saeejithn/elastic-nerf/0rn5ziwc",
    "crumbs": ["Logs"]
  },
  {
    "objectID": "reports/index.html",
    "href": "reports/index.html",
    "title": "Reports",
    "section": "",
    "text": "Reports.",
    "crumbs": ["Reports"]
  },
  {
    "objectID": "experiments/exploration/Nerfacc_Baseline_Benchmarking.html",
    "href": "experiments/exploration/Nerfacc_Baseline_Benchmarking.html",
    "title": "Baseline Benchmarking",
    "section": "",
    "text": "So far, we benchmarked our reimplementation of Nerfacc’s NGP-Occ on the Blender synthetic dataset and Nerfacc’s NGP-Prop on the MipNeRF-360 dataset. It’s slightly lower for certain scenes (but also slightly higher for other scenes) but it’s extremely close so barring any discrepancies that come up in the future, it looks like the reimplementation is correct.",
    "crumbs": ["Experiments", "Exploration", "Baseline Benchmarking"]
  },
  {
    "objectID": "experiments/exploration/Nerfacc_Baseline_Benchmarking.html#blender-synthetic-dataset",
    "href": "experiments/exploration/Nerfacc_Baseline_Benchmarking.html#blender-synthetic-dataset",
    "title": "Baseline Benchmarking",
    "section": "1.1 Blender synthetic dataset",
    "text": "1.1 Blender synthetic dataset\nWe compare against the official results which was last updated on 2023-04-04 with nerfacc==0.5.0. We use their results for the Ours (occ) 20k steps method.\n\n\nFetch data from wandb sweep bj5mkdex\n# Load sweep data\nsweep_id = \"bj5mkdex\"\n\n# Get the runs from sweep.\nngp_occ_blender_results = wu.fetch_sweep_results(sweep_id)\ndf_ngp_occ_blender_results = wu.prepare_data(ngp_occ_blender_results)\n\n\n(gonas) [WARNING] Using cached results for sweep bj5mkdex\n\n\n\n\nCode\n# Original column names are long so remap for readability.\ncolumn_mapping = {\n    'dataset_name': 'Dataset',\n    'dataset_scene': 'Scene',\n    'radiance_field_use_elastic': 'Radiance Field Use Elastic',\n    'num_train_granularities': 'Num Train Granularities',\n    'num_granularities_to_sample': 'Num Granularities To Sample',\n    'max_steps': 'Max Steps',\n    'hidden_dim': 'Max Width',\n    'Eval Results Summary/psnr_avg/elastic_64': 'PSNR Avg',\n    'Eval Results Summary/ssim_avg/elastic_64': 'SSIM Avg',\n    'Eval Results Summary/lpips_avg/elastic_64': 'LPIPS Avg',\n}\nformat_mapping = {\n    'PSNR Avg': \".4f\",\n    'SSIM Avg': \".4f\",\n    'LPIPS Avg': \".4f\",\n}\n\n# Cleanup results from the benchmarking of our reimplementation for plotting.\nplotter = ru.DataTablePlotter()\nplotter.add_dataframe('NGP Occ Baseline Benchmarking (Ours)', df_ngp_occ_blender_results, column_mapping=column_mapping, format_mapping=format_mapping)\ndf_ngp_occ_blender_results = plotter.get_remapped_dataframe('NGP Occ Baseline Benchmarking (Ours)')\n\n# Create a dataframe for the official results and calculate the % difference between our reimplementation and their official results.\ndf_nerfacc_occ_baseline = pd.DataFrame({\n    'Scene': du.blender_scenes,\n    'PSNR (Official)': [35.67, 36.85, 29.60, 35.71, 37.37, 33.95, 25.44, 30.29],\n    'PSNR (Ours)': [df_ngp_occ_blender_results.loc[df_ngp_occ_blender_results['Scene'] == scene, 'PSNR Avg'].iloc[0] for scene in du.blender_scenes],\n})\ndifference = (\n    (df_nerfacc_occ_baseline['PSNR (Ours)'] - df_nerfacc_occ_baseline['PSNR (Official)']) /\n    df_nerfacc_occ_baseline['PSNR (Official)']\n)\n# Visualize in table as a percentage.\ndf_nerfacc_occ_baseline[\"% Difference\"] = difference * 100\n\n\n# Create a color mapping for all cells based on the % difference.\ncolors = px.colors.sample_colorscale(\"RdYlGn\", list(np.interp(difference, [-1, 1], [0, 1])))\ncolor_mapping = {\"ALL_COLUMNS\": colors}\nformat_mapping = {\n    'PSNR (Ours)': \".2f\",\n    '% Difference': \".4f\",\n}\n\nplotter.add_dataframe('Comparison with Official Nerfacc Results', df_nerfacc_occ_baseline, color_mapping=color_mapping, format_mapping=format_mapping)\nplotter.show()",
    "crumbs": ["Experiments", "Exploration", "Baseline Benchmarking"]
  },
  {
    "objectID": "experiments/exploration/Nerfacc_Baseline_Benchmarking.html#blender-synthetic-dataset-1",
    "href": "experiments/exploration/Nerfacc_Baseline_Benchmarking.html#blender-synthetic-dataset-1",
    "title": "Baseline Benchmarking",
    "section": "2.1 Blender synthetic dataset",
    "text": "2.1 Blender synthetic dataset",
    "crumbs": ["Experiments", "Exploration", "Baseline Benchmarking"]
  },
  {
    "objectID": "experiments/exploration/Nerfacc_Baseline_Benchmarking.html#mip-nerf-360-dataset",
    "href": "experiments/exploration/Nerfacc_Baseline_Benchmarking.html#mip-nerf-360-dataset",
    "title": "Baseline Benchmarking",
    "section": "2.1 Mip-NeRF 360 dataset",
    "text": "2.1 Mip-NeRF 360 dataset\n\n\nFetch data from wandb sweep 0rn5ziwc\n# Load sweep data\nsweep_id = \"0rn5ziwc\"\n\n# Get the runs from sweep.\nngp_prop_mipnerf360_results = wu.fetch_sweep_results(sweep_id)\ndf_ngp_prop_mipnerf360_results = wu.prepare_data(ngp_prop_mipnerf360_results)\n\n\n(gonas) [WARNING] Using cached results for sweep 0rn5ziwc\n\n\nWe compare against the official results which was last updated on 2023-04-04 with nerfacc==0.5.0. We use their results for the Ours (prop) 20k steps method.\n\n\nCode\n# Original column names are long so remap for readability.\ncolumn_mapping = {\n    'dataset': 'Dataset',\n    'scene': 'Scene',\n    'radiance_field_use_elastic': 'Radiance Field Use Elastic',\n    'density_field_use_elastic': 'Density Field Use Elastic',\n    'num_train_granularities': 'Num Train Granularities',\n    'num_granularities_to_sample': 'Num Granularities To Sample',\n    'max_steps': 'Max Steps',\n    'hidden_dim': 'Max Width',\n    'Eval Results Summary/psnr_avg/elastic_64': 'PSNR Avg',\n    'Eval Results Summary/ssim_avg/elastic_64': 'SSIM Avg',\n    'Eval Results Summary/lpips_avg/elastic_64': 'LPIPS Avg',\n}\nformat_mapping = {\n    'PSNR Avg': \".4f\",\n    'SSIM Avg': \".4f\",\n    'LPIPS Avg': \".4f\",\n}\n\n# Cleanup results from the benchmarking of our reimplementation for plotting.\nplotter = ru.DataTablePlotter()\nplotter.add_dataframe('NGP Prop Baseline Benchmarking (Ours)', df_ngp_prop_mipnerf360_results, column_mapping=column_mapping, format_mapping=format_mapping)\ndf_ngp_prop_mipnerf360_results = plotter.get_remapped_dataframe('NGP Prop Baseline Benchmarking (Ours)')\n\n# Create a dataframe for the official results and calculate the % difference between our reimplementation and their official results.\ndf_nerfacc_prop_baseline = pd.DataFrame({\n    'Scene': du.mipnerf360_scenes,\n    'PSNR (Official)': [23.23, 25.42, 25.24, 30.71, 26.74, 30.70, 30.99],\n    'PSNR (Ours)': [df_ngp_prop_mipnerf360_results.loc[df_ngp_prop_mipnerf360_results['Scene'] == scene, 'PSNR Avg'].iloc[0] for scene in du.mipnerf360_scenes],\n})\ndifference = (\n    (df_nerfacc_prop_baseline['PSNR (Ours)'] - df_nerfacc_prop_baseline['PSNR (Official)']) /\n    df_nerfacc_prop_baseline['PSNR (Official)']\n)\n# Visualize in table as a percentage.\ndf_nerfacc_prop_baseline[\"% Difference\"] = difference * 100\n\n\n# Create a color mapping for all cells based on the % difference.\ncolors = px.colors.sample_colorscale(\"RdYlGn\", list(np.interp(difference, [-1, 1], [0, 1])))\ncolor_mapping = {\"ALL_COLUMNS\": colors}\nformat_mapping = {\n    'PSNR (Ours)': \".2f\",\n    '% Difference': \".4f\",\n}\n\nplotter.add_dataframe('Comparison with Official Nerfacc Results', df_nerfacc_prop_baseline, color_mapping=color_mapping, format_mapping=format_mapping)\nplotter.show()",
    "crumbs": ["Experiments", "Exploration", "Baseline Benchmarking"]
  }
]
